#+TITLE: emacs.d - Evil
#+AUTHOR: James Conroy-Finn
#+EMAIL: james@logi.cl
#+STARTUP: content
#+OPTIONS: toc:2 num:nil ^:nil

* Abstract

Emacs is a fantastic environment to work in. With Vim-style keybindings editing
text is only made easier.

* Setup

#+begin_src emacs-lisp
  (use-package evil)
#+end_src

* Exchange

An [[https://github.com/Dewdrops/evil-exchange][Emacs port]] of [[https://github.com/tommcdo/vim-exchange][vim-exchange]], designed to make it easier to exchange two
regions.

#+begin_src emacs-lisp
  (use-package evil-exchange)
#+end_src

* Indent Textobject

[[https://github.com/cofi/evil-indent-textobject][evil-indent-text-object]] defines textobjects based on indentation.

#+begin_src emacs-lisp
  (use-package evil-indent-textobject)
#+end_src

* Leader
** Setup

[[https://github.com/cofi/evil-leader][evil-leader]] adds support for Vim's venerable ~<leader>~ key, which any Vim user
will be very accustomed to.

#+begin_src emacs-lisp
  (use-package evil-leader)
  (setq evil-leader/leader ",")
#+end_src

** Leader outside of normal mode

Enable ~<leader>~ in Dired, GNUs, Magit, and Notmuch.

#+begin_src emacs-lisp
  (setq evil-leader/no-prefix-mode-rx '("dired-mode"
                                        "gnus-.*-mode"
                                        "magit-.*-mode"
                                        "notmuch-.*-mode"))
#+end_src

** Global

#+begin_src emacs-lisp
  (evil-leader/set-key
    "," 'evilnc-comment-operator
    "<SPC>" 'ace-jump-char-mode
    "a"  'projectile-toggle-between-implementation-and-test
    "b"  'ibuffer
    "cc" 'evilnc-comment-or-uncomment-lines
    "ci" 'evilnc-copy-and-comment-lines
    "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    "cp" 'evilnc-comment-or-uncomment-paragraphs
    ;; "cr" 'comment-or-uncomment-region
    ;; "cv" 'evilnc-toggle-invert-comment-line-by-line
    "db" 'kill-buffer
    "df" 'delete-this-file
    "dw" 'jcf-delete-window
    "eb" 'eval-buffer
    "ed" 'eval-defun
    "ee" 'eval-expression
    "es" 'eval-last-sexp
    "er" 'eval-region
    "fA" 'helm-do-ag
    "fa" 'helm-do-ag-project-root
    "fb" 'helm-buffers-list
    "fd" 'projectile-dired
    "ff" 'helm-find-files
    "fg" 'helm-ls-git-ls
    "fh" 'helm-resume
    "fi" 'helm-semantic-or-imenu
    "fj" 'dired-jump
    "fl" 'helm-occur
    "fm" 'helm-mini
    "fp" 'helm-projectile
    "fs" 'eshell
    "fS" 'jcf-eshell-here
    "fy" 'helm-show-kill-ring
    "ga" 'git-messenger:popup-message
    "gb" 'magit-blame-mode
    "gc" 'magit-commit
    "gl" 'magit-log
    "gs" 'magit-status
    "hf" 'describe-function
    "hk" 'describe-key
    "hm" 'describe-mode
    "hp" 'describe-package
    "hv" 'describe-variable
    "i" 'ielm
    "oa" 'org-agenda
    "oc" 'org-capture
    "pL" 'package-list-packages-no-fetch
    "pa" 'helm-projectile-ag
    "pb" 'helm-projectile-switch-to-buffer
    "pe" 'helm-projectile-switch-to-eshell
    "pf" 'helm-projectile-find-file-dwim
    "pi" 'package-install
    "pl" 'package-list-packages
    "pp" 'helm-projectile-switch-project
    "rf" 'rename-buffer-and-file
    "sd" 'jcf-delete-window
    "sf" 'delete-other-windows
    "sj" 'switch-window ; ace-jump will kick in
    "ss" 'jcf-split-window-horizontally
    "sv" 'jcf-split-window-vertically
    "w"  'save-buffer
    "x"  'execute-extended-command)
#+end_src

** Alchemist

#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'elixir-mode
    "v" 'alchemist-mix-test-at-point
    "V" 'alchemist-mix-test-this-buffer)
#+end_src

** Org

#+begin_src emacs-lisp
  (defun jcf-evil-org-insert-todo ()
    "Insert a new TODO heading, and switch to insert mode."
    (interactive)
    (org-insert-todo-heading nil)
    (evil-insert 0))
#+end_src

#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode
    "oh" 'org-insert-heading
    "ol" 'org-babel-load-file
    "os" 'org-sort-list
    "ot" 'org-todo
    "oT" 'jcf-evil-org-insert-todo
    "obt" 'org-babel-tangle)
#+end_src

** Clojure

#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'clojure-mode
    "v" 'cider-test-run-test
    "V" 'cider-test-run-tests
    "cC" 'cider-connect
    "cj" 'cider-switch-to-relevant-repl-buffer
    "cJ" 'cider-jack-in
    "cq" 'cider-quit
    "cr" 'cider-refresh
    "cR" 'cider-restart
    "ct" 'typed-clojure-check-ns
    "eb" 'cider-eval-buffer
    "ed" 'cider-eval-defun-at-point
    "es" 'cider-pprint-eval-last-sexp
    "er" 'cider-eval-region)
#+end_src

** Cider

#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'cider-repl-mode
    "cc" 'cider-connect
    "cj" 'cider-switch-to-last-clojure-buffer
    "cq" 'cider-quit
    "cr" 'cider-refresh
    "cR" 'cider-restart)
#+end_src

** Ruby

#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'ruby-mode
    "v" 'rspec-verify
    "V" 'rspec-verify-all)
#+end_src

** Cucumber

#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'feature-mode
    "v" 'feature-verify-scenario-at-pos
    "V" 'feature-verify-all-scenarios-in-buffer)
#+end_src

* Keybindings
** Clojure

#+begin_src emacs-lisp
  (evil-define-key 'normal clojure-mode-map
    (kbd "gd") 'cider-jump
    (kbd "K") 'cider-doc
    (kbd "gK") 'cider-javadoc)

  (evil-define-key 'normal cider-repl-mode-map (kbd "gK") 'cider-javadoc)
  (evil-define-key 'normal cider-mode-map (kbd "gK") 'cider-javadoc)
#+end_src

* Undo granularity

Undo like Vim: everything you do during an insert session will be undone in one
chunk.

#+begin_src emacs-lisp
  (setq evil-want-fine-undo 'no)
#+end_src

* Extended ~%~ matches

[[https://github.com/redguardtoo/evil-matchit][evil-matchit]] is a port of [[http://www.vim.org/scripts/script.php?script_id%3D39][matchit.vim]] by Benji Fisher. Matchit enhances ~%~ to
match HTML tags, ~do~/~end~ blocks and more.

#+begin_src emacs-lisp
  (use-package evil-matchit)
#+end_src

* NERD commenter

I tend to use Emacs' built-in ~comment-dwim~ more than [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]], but
it's here in case I decide to regress.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src

* Numbers

Another one from [[https://github.com/cofi][Michael Markert]] (perhaps better known as cofi), [[https://github.com/cofi/evil-numbers][evil-numbers]]
enhances ~C-a~ and ~C-x~ in a similar way to Tim Pope's [[https://github.com/tpope/vim-speeddating][speeddating.vim]].

#+begin_src emacs-lisp
  (use-package evil-numbers)

  (define-key evil-normal-state-map (kbd "C-A")
    'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-S-A")
    'evil-numbers/dec-at-pt)
#+end_src

* Visual star

#+begin_src emacs-lisp
  (use-package evil-visualstar)
  (setq-default evil-symbol-word-search t)
#+end_src

* ~goto-chg~

#+begin_src emacs-lisp
  (use-package goto-chg)
#+end_src

* Surround

#+begin_src emacs-lisp
  (use-package evil-surround)
#+end_src

* Jumper

#+begin_src emacs-lisp
  (use-package evil-jumper)
#+end_src

* Fire up the modes

Activates all of the evil extensions installed above, making sure to [[http://j.mp/1i0vLSP][load
evil-leader]] before evil itself.

#+begin_src emacs-lisp
  (global-evil-leader-mode 1)
  (evil-mode 1)
  (global-evil-surround-mode 1)
  (global-evil-matchit-mode 1)
  (evil-exchange-install)
  (use-package evil-jumper)
#+end_src

* Motions around wrapped lines

Make up and down step through wrapped lines.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "gj") 'evil-next-line)
  (define-key evil-normal-state-map (kbd "gk") 'evil-previous-line)
#+end_src

* Default cursor

#+begin_src emacs-lisp
  (setq evil-default-cursor t)
#+end_src

* Modeline

#+begin_src emacs-lisp
  (setq evil-insert-state-message nil)
  (setq evil-visual-state-message nil)
  (setq evil-mode-line-format 'before)
#+end_src

* Use evil-search

#+begin_src emacs-lisp
  (setq evil-search-module 'evil-search)
#+end_src

* Colourise cursor based on state

#+begin_src emacs-lisp
  (setq evil-emacs-state-cursor  '("red" box))
  (setq evil-normal-state-cursor '("gray" box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-insert-state-cursor '("gray" bar))
  (setq evil-motion-state-cursor '("gray" box))
#+end_src

* Yank to end of line

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "Y" (kbd "y$"))
#+end_src

* Delete and balance windows

Used in some ~<leader>~ bindings below.

#+begin_src emacs-lisp
  (defun jcf-delete-window ()
    "Delete the current window, and rebalance remaining windows."
    (interactive)
    (delete-window)
    (balance-windows))

  (defun jcf-split-window-horizontally ()
    "Create a new horizontal split and rebalance windows."
    (interactive)
    (split-window-horizontally)
    (balance-windows))

  (defun jcf-split-window-vertically ()
    "Create a new vertical split and rebalance windows."
    (interactive)
    (split-window-vertically)
    (balance-windows))
#+end_src

* Use global tags

#+begin_src emacs-lisp
  (define-key evil-motion-state-map (kbd "C-]") 'ggtags-find-tag-dwim)
#+end_src

* Space to repeat ~find-char~

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "SPC") 'evil-repeat-find-char)
  (define-key evil-normal-state-map (kbd "S-SPC") 'evil-repeat-find-char-reverse)

  (define-key evil-motion-state-map (kbd "SPC") 'evil-repeat-find-char)
  (define-key evil-motion-state-map (kbd "S-SPC") 'evil-repeat-find-char-reverse)
#+end_src

* Use ~escape~ to quit everywhere

#+begin_src emacs-lisp
  ;; Use escape to quit, and not as a meta-key.
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+end_src

* ~C-hjkl~ to move around windows

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
#+end_src

* Lazy ex with ~;~

#+begin_src emacs-lisp
  (define-key evil-normal-state-map ";" 'evil-ex)
  (define-key evil-visual-state-map ";" 'evil-ex)
#+end_src

* Initial evil state per mode

#+begin_src emacs-lisp
  (loop for (mode . state)
        in '((bc-menu-mode . emacs)
             (dired-mode . emacs)
             (eshell-mode . insert)
             (git-rebase-mode . emacs)
             (grep-mode . emacs)
             (helm-grep-mode . emacs)
             (help-mode . emacs)
             (ielm-mode . insert)
             (magit-branch-manager-mode . emacs)
             (nrepl-mode . insert)
             (prodigy-mode . normal)
             (rdictcc-buffer-mode . emacs)
             (shell-mode . insert)
             (term-mode . emacs)
             (wdired-mode . normal))
        do (evil-set-initial-state mode state))
#+end_src

* Dired

Use hjkl in Dired, with some of the more useful conflicting mappings
capitalised.

#+begin_src emacs-lisp
  (evil-add-hjkl-bindings dired-mode-map 'emacs)
  (evil-add-hjkl-bindings dired-mode-map 'emacs
    "J" 'dired-goto-file
    "K" 'dired-do-kill-lines
    "L" 'dired-do-redisplay)
#+end_src

* Magit

#+begin_src emacs-lisp
  (evil-add-hjkl-bindings magit-log-mode-map 'emacs)
  (evil-add-hjkl-bindings magit-commit-mode-map 'emacs)
  (evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
    "K" 'magit-discard-item
    "L" 'magit-key-mode-popup-logging)
  (evil-add-hjkl-bindings magit-status-mode-map 'emacs
    "K" 'magit-discard-item
    "l" 'magit-key-mode-popup-logging
    "h" 'magit-toggle-diff-refine-hunk)
#+end_src

* Org mode

** Setup a minor mode to contain our own keybindings

#+begin_src emacs-lisp
  (define-minor-mode evil-org-mode
    "Buffer local minor mode for evil-org"
    :init-value nil
    :lighter " EvilOrg"
    :keymap (make-sparse-keymap)
    :group 'evil-org)

  (add-hook 'org-mode-hook 'evil-org-mode)
#+end_src

** Recompute clocks in visual selection

#+begin_src emacs-lisp
  (evil-define-operator evil-org-recompute-clocks (beg end type register yank-handler)
    :keep-visual t
    :move-point nil
    (interactive "<r>")
    (progn
      (save-excursion
        (while (< (point) end)
          (org-evaluate-time-range)
          (next-line)))))
#+end_src

** Open Org mode links in visual selection

#+begin_src emacs-lisp
  (evil-define-operator evil-org-open-links (beg end type register yank-handler)
    :keep-visual t
    :move-point nil
    (interactive "<r>")
    (save-excursion
      (goto-char beg)
      (beginning-of-line)
      (catch 'break
        (while (< (point) end)
          (org-next-link)
          (when (not(< (point) end)) (throw 'break 0))
          (org-open-at-point)))))
#+end_src

** Keybindings for normal state

#+begin_src emacs-lisp
  (evil-define-key 'normal evil-org-mode-map
    "gh" 'outline-up-heading
    "gj" 'org-forward-heading-same-level
    "gk" 'org-backward-heading-same-level
    "gl" 'outline-next-visible-heading
    "H" 'org-beginning-of-line
    "L" 'org-end-of-line
    ;;"o" '(lambda () (interactive) (evil-org-eol-call 'clever-insert-item))
    ;;"O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
    ;;"$" 'org-end-of-line
    ;;"^" 'org-beginning-of-line
    ;;"<" 'org-metaleft
    ;;">" 'org-metaright
    ;;"-" 'org-cycle-list-bullet
    )
#+end_src

** Keybindings for both normal and insert mode

#+begin_src emacs-lisp
  (mapc
   (lambda (state)
     (evil-define-key state evil-org-mode-map
       (kbd "M-l") 'org-metaright
       (kbd "M-h") 'org-metaleft
       (kbd "M-k") 'org-metaup
       (kbd "M-j") 'org-metadown
       (kbd "M-L") 'org-shiftmetaright
       (kbd "M-H") 'org-shiftmetaleft
       (kbd "M-K") 'org-shiftmetaup
       (kbd "M-J") 'org-shiftmetadown))
   '(normal insert))
#+end_src

* Scroll when searching

#+begin_src emacs-lisp
  (defadvice evil-search-next
      (after advice-for-evil-search-next activate)
    (evil-scroll-line-to-center (line-number-at-pos)))

  (defadvice evil-search-previous
      (after advice-for-evil-search-previous activate)
    (evil-scroll-line-to-center (line-number-at-pos)))
#+end_src
