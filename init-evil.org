#+TITLE: emacs.d - Evil
#+AUTHOR: James Conroy-Finn
#+EMAIL: james@logi.cl
#+STARTUP: content
#+OPTIONS: toc:2 num:nil ^:nil

* Evil

  Emacs is a fantastic environment to work in. With Vim-style
  keybindings editing text is only made easier.

** Setup

   #+begin_src emacs-lisp
     (require 'evil)
   #+end_src

** Exchange

   An [[https://github.com/Dewdrops/evil-exchange][Emacs port]] of [[https://github.com/tommcdo/vim-exchange][vim-exchange]], designed to make it easier to
   exchange two regions.

   #+begin_src emacs-lisp
     (require 'evil-exchange)
   #+end_src

** Indent Textobject

   [[https://github.com/cofi/evil-indent-textobject][evil-indent-text-object]] defines textobjects based on indentation.

   #+begin_src emacs-lisp
     (require 'evil-indent-textobject)
   #+end_src

** Leader

   [[https://github.com/cofi/evil-leader][evil-leader]] adds support for Vim's venerable ~<leader>~ key, which
   any Vim user will be very accustomed to.

   #+begin_src emacs-lisp
     (require 'evil-leader)
     (setq evil-leader/leader ",")
   #+end_src

*** Global

   #+begin_src emacs-lisp
     (evil-leader/set-key
       "a"  'projectile-toggle-between-implementation-and-test
       "b"  'ibuffer
       "db" 'kill-buffer
       "df" 'delete-this-file
       "dw" 'jcf/delete-window
       "eb" 'eval-buffer
       "ed" 'eval-defun
       "ee" 'eval-expression
       "es" 'eval-last-sexp
       "er" 'eval-region
       "fa" 'helm-ag
       "fb" 'helm-buffers-list
       "ff" 'helm-find-files
       "fg" 'helm-ls-git-ls
       "fi" 'helm-semantic-or-imenu
       "fj" 'dired-jump
       "fl" 'helm-occur
       "fp" 'helm-projectile
       "fy" 'helm-show-kill-ring
       "gb" 'magit-blame-mode
       "gc" 'magit-commit
       "gl" 'magit-log
       "gs" 'magit-status
       "hf" 'describe-function
       "hm" 'describe-mode
       "hp" 'describe-package
       "hv" 'describe-variable
       "pb" 'projectile-switch-to-buffer
       "pd" 'projectile-switch-project
       "pf" 'projectile-find-file
       "sd" 'jcf/delete-window
       "sf" 'delete-other-windows
       "ss" 'jcf/split-window-horizontally
       "sv" 'jcf/split-window-vertically
       "w"  'save-buffer
       "x"  'execute-extended-command)
   #+end_src

*** Org

   #+begin_src emacs-lisp
     (evil-leader/set-key-for-mode 'org-mode
       "ol" 'org-babel-load-file
       "os" 'org-sort-list
       "ot" 'org-babel-tangle)
   #+end_src

*** Clojure

   #+begin_src emacs-lisp
     (evil-leader/set-key-for-mode 'clojure-mode
       "v" 'cider-test-run-test
       "V" 'cider-test-run-tests
       "cc" 'cider-connect
       "cj" 'cider-jack-in
       "cq" 'cider-quit
       "eb" 'cider-eval-buffer
       "ed" 'cider-eval-defun-at-point
       "es" 'cider-eval-last-sexp
       "er" 'cider-eval-region
       "rs" 'cljr-sort-ns
       "rr" 'cljr-add-require-to-ns
       "ru" 'cljr-add-use-to-ns)
   #+end_src

*** Ruby

   #+begin_src emacs-lisp
     (evil-leader/set-key-for-mode 'ruby-mode
       "v" 'rspec-verify
       "V" 'rspec-verify-all)
   #+end_src

*** Cucumber

   #+begin_src emacs-lisp
     (evil-leader/set-key-for-mode 'feature-mode
       "v" 'feature-verify-scenario-at-pos
       "V" 'feature-verify-all-scenarios-in-buffer)
   #+end_src

** Extended ~%~ matches

   [[https://github.com/redguardtoo/evil-matchit][evil-matchit]] is a port of [[http://www.vim.org/scripts/script.php?script_id%3D39][matchit.vim]] by Benji Fisher. Matchit
   enhances ~%~ to match HTML tags, ~do~/~end~ blocks and more.

   #+begin_src emacs-lisp
     (require 'evil-matchit)
   #+end_src

** NERD commenter

   I tend to use Emacs' built-in ~comment-dwim~ more than
   [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]], but it's here in case I decide to regress.

   #+begin_src emacs-lisp
     (require 'evil-nerd-commenter)
   #+end_src

** Numbers

   Another one from [[https://github.com/cofi][Michael Markert]] (perhaps better known as cofi),
   [[https://github.com/cofi/evil-numbers][evil-numbers]] enhances ~C-a~ and ~C-x~ in a similar way to Tim
   Pope's [[https://github.com/tpope/vim-speeddating][speeddating.vim]].

   #+begin_src emacs-lisp
     (require 'evil-numbers)

     (define-key evil-normal-state-map (kbd "C-A")
       'evil-numbers/inc-at-pt)
     (define-key evil-normal-state-map (kbd "C-S-A")
       'evil-numbers/dec-at-pt)
   #+end_src

** Visual star

   #+begin_src emacs-lisp
     (require 'evil-visualstar)
     (setq-default evil-symbol-word-search t)
   #+end_src

** ~goto-chg~

   #+begin_src emacs-lisp
     (require 'goto-chg)
   #+end_src

** Surround

   #+begin_src emacs-lisp
     (require 'evil-surround)
   #+end_src

** Jumper

   #+begin_src emacs-lisp
     (require 'evil-jumper)
   #+end_src

** Fire up the modes

   Activates all of the evil extensions installed above, making sure
   to [[http://j.mp/1i0vLSP][load evil-leader]] before evil itself.

   #+begin_src emacs-lisp
     (global-evil-leader-mode 1)
     (evil-mode 1)
     (global-evil-surround-mode 1)
     (global-evil-matchit-mode 1)
     (evil-exchange-install)
     (require 'evil-jumper)
   #+end_src

** Motions around wrapped lines

   Make up and down step through wrapped lines.

   #+begin_src emacs-lisp
     (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
     (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
     (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
     (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
   #+end_src

** Default cursor

  #+begin_src emacs-lisp
    (setq evil-default-cursor t)
  #+end_src

** Modeline

  #+begin_src emacs-lisp
    (setq evil-insert-state-message nil)
    (setq evil-visual-state-message nil)
    (setq evil-mode-line-format 'before)
  #+end_src

** Use evil-search

  #+begin_src emacs-lisp
    (setq evil-search-module 'evil-search)
  #+end_src

** Colourise cursor based on state

  #+begin_src emacs-lisp
    (setq evil-emacs-state-cursor  '("red" box))
    (setq evil-normal-state-cursor '("gray" box))
    (setq evil-visual-state-cursor '("gray" box))
    (setq evil-insert-state-cursor '("gray" bar))
    (setq evil-motion-state-cursor '("gray" box))
  #+end_src

** Yank to end of line

   #+begin_src emacs-lisp
     (define-key evil-normal-state-map "Y" (kbd "y$"))
   #+end_src

** Delete and balance windows

   Used in some ~<leader>~ bindings below.

   #+begin_src emacs-lisp
     (defun jcf/delete-window ()
       "Delete the current window, and rebalance remaining windows."
       (interactive)
       (delete-window)
       (balance-windows))

     (defun jcf/split-window-horizontally ()
       "Create a new horizontal split and rebalance windows."
       (interactive)
       (split-window-horizontally)
       (balance-windows))

     (defun jcf/split-window-vertically ()
       "Create a new vertical split and rebalance windows."
       (interactive)
       (split-window-vertically)
       (balance-windows))
   #+end_src

** Use global tags

   #+begin_src emacs-lisp
     (define-key evil-motion-state-map (kbd "C-]") 'ggtags-find-tag-dwim)
   #+end_src

** Space to repeat ~find-char~

   #+begin_src emacs-lisp
     (define-key evil-normal-state-map (kbd "SPC") 'evil-repeat-find-char)
     (define-key evil-normal-state-map (kbd "S-SPC") 'evil-repeat-find-char-reverse)

     (define-key evil-motion-state-map (kbd "SPC") 'evil-repeat-find-char)
     (define-key evil-motion-state-map (kbd "S-SPC") 'evil-repeat-find-char-reverse)
   #+end_src

** Use ~escape~ to quit everywhere

   #+begin_src emacs-lisp
     ;; Use escape to quit, and not as a meta-key.
     (define-key evil-normal-state-map [escape] 'keyboard-quit)
     (define-key evil-visual-state-map [escape] 'keyboard-quit)
     (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
   #+end_src

** ~C-hjkl~ to move around windows

   #+begin_src emacs-lisp
     (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
     (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
     (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
     (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
   #+end_src

** Lazy ex with ~;~

   #+begin_src emacs-lisp
     (define-key evil-normal-state-map ";" 'evil-ex)
     (define-key evil-visual-state-map ";" 'evil-ex)
   #+end_src

** Initial evil state per mode

   #+begin_src emacs-lisp
     (loop for (mode . state)
           in '((ielm-mode . insert)
                (nrepl-mode . insert)
                (shell-mode . insert)
                (git-rebase-mode . emacs)
                (term-mode . emacs)
                (help-mode . emacs)
                (helm-grep-mode . emacs)
                (grep-mode . emacs)
                (bc-menu-mode . emacs)
                (magit-branch-manager-mode . emacs)
                (rdictcc-buffer-mode . emacs)
                (dired-mode . normal)
                (wdired-mode . normal))
           do (evil-set-initial-state mode state))
   #+end_src

** Magit from avsej

   #+begin_src emacs-lisp
     (evil-add-hjkl-bindings magit-log-mode-map 'emacs)
     (evil-add-hjkl-bindings magit-commit-mode-map 'emacs)
     (evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
       "K" 'magit-discard-item
       "L" 'magit-key-mode-popup-logging)
     (evil-add-hjkl-bindings magit-status-mode-map 'emacs
       "K" 'magit-discard-item
       "l" 'magit-key-mode-popup-logging
       "h" 'magit-toggle-diff-refine-hunk)
   #+end_src

** Scroll when searching

   #+begin_src emacs-lisp
     (defadvice evil-search-next
         (after advice-for-evil-search-next activate)
       (evil-scroll-line-to-center (line-number-at-pos)))

     (defadvice evil-search-previous
         (after advice-for-evil-search-previous activate)
       (evil-scroll-line-to-center (line-number-at-pos)))
   #+end_src
