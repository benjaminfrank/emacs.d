#+TITLE: emacs.d - Packages
#+AUTHOR: James Conroy-Finn
#+EMAIL: james@logi.cl
#+STARTUP: content
#+OPTIONS: toc:2 num:nil ^:nil

* Abstract

The many packages we use are required and configured below.

We can control the amount of output ~use-package~ generates by setting
~use-package-verbose~ to true.

#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src

* Ace Jump

#+begin_src emacs-lisp
  (use-package ace-jump-mode)
#+end_src

* Cider

#+begin_src emacs-lisp
  (use-package cider
    :commands (cider cider-connect cider-jack-in)
    :init
    (setq cider-auto-select-error-buffer t
          cider-repl-pop-to-buffer-on-connect t
          cider-repl-use-clojure-font-lock t
          cider-repl-wrap-history t
          cider-repl-history-size 1000
          cider-repl-history-file (f-expand ".cider-history"
                                            user-emacs-directory)
          cider-show-error-buffer t
          nrepl-hide-special-buffers t
          nrepl-popup-stacktraces nil)
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'cider-repl-mode-hook 'smartparens-strict-mode)
    (add-hook 'cider-repl-mode-hook 'subword-mode)
    (add-hook 'cider-test-report-mode 'jcf-soft-wrap)
    ;; nrepl isn't based on comint
    (add-hook 'cider-repl-mode-hook
              (lambda () (setq show-trailing-whitespace nil)))

    :config
    (use-package slamhound))
#+end_src

* Company

Company mode is a fast, configurable completion system that allows for extension
using a simple API.

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :init (global-company-mode 1)

    :config
    (dolist ((package '(company-ghc
                        company-go
                        company-inf-ruby
                        company-tern)))
      (use-package package :init
        (add-to-list 'company-backends package)))

    ;; Use Helm to complete suggestions
    (define-key company-mode-map (kbd "C-:") 'helm-company)
    (define-key company-active-map (kbd "C-:") 'helm-company)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+end_src

* Dired

#+begin_src emacs-lisp
  (use-package dired
    :commands dired
    :init
    (setq dired-recursive-deletes 'top)
    (setq dired-listing-switches "--group-directories-first -alh")
    (setq diredp-hide-details-initially-flag nil)

    (define-key dired-mode-map [mouse-2] 'dired-find-file)
    (guide-key/add-local-guide-key-sequence "%")

    :config
    (use-package dired+))
#+end_src

Some interesting options available to GNU ls:

- ~a~: list all files
- ~h~, ~--human-readable~: with ~-l~, print sizes in human readable format
  (e.g., 1K 234M 2G)
- ~l~: use a long listing format
- ~group-directories-first~: group directories before files
- ~X~: sort alphabetically by entry extension
- ~U~: do not sort; list entries in directory order
- ~t~: sort by modification time, newest first
- ~S~: sort by file size

* Dizzee

#+begin_src emacs-lisp
  (use-package dizzee
    :commands (jcf-lein-datomic-start jcf-lein-headless-start)
    :config
    (dz-defservice jcf-lein-headless
                   "lein"
                   :cd "~/"
                   :args ("repl" ":headless"))

    (dz-defservice jcf-lein-datomic
                   "lein"
                   :args ("datomic")))
#+end_src
* dsvn

#+begin_src emacs-lisp
  (use-package dsvn
    :commands svn-status)
#+end_src

* Editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :if (executable-find "editorconfig")
    :mode ("\\.editorconfig\\'" . conf-unix-mode))
#+end_src

* erc

#+begin_src emacs-lisp
  (use-package erc
    :commands erc
    :init
    (setq
     erc-hide-list '("JOIN" "PART" "QUIT")
     erc-insert-timestamp-function 'erc-insert-timestamp-left
     erc-timestamp-format "[%H:%M] "
     erc-timestamp-only-if-changed-flag nil
     erc-truncate-mode t)
    :config
    (add-hook
     'window-configuration-change-hook
     (lambda () (setq erc-fill-column (- (window-width) 2)))))
#+end_src

* eshell

Eshell provides an Emacs Lisp enabled shell.

- Always insert text at the prompt.
- Allow symbol names to be used for redirection targets.
- This makes it possible to redirect output like so:
- Ignore case when completing filenames.
- Error when a glob matches nothing. This mirrors the default
  behaviour of zsh.
- Make globs case-insensitive.

~NODE_NO_READLINE=1~ tells Node.js, and hence ~npm~ to avoid use of escape codes
because they don't print well.

#+begin_src emacs-lisp
  (use-package eshell
    :commands eshell
    :init
    (setq
     eshell-buffer-shorthand t
     eshell-cmpl-ignore-case t
     eshell-cmpl-cycle-completions nil
     eshell-history-size 10000
     eshell-hist-ignoredups t
     eshell-error-if-no-glob t
     eshell-glob-case-insensitive t
     eshell-scroll-to-bottom-on-input 'all)
    :config
    (defun jcf-eshell-here ()
      (interactive)
      (eshell "here"))

    (defun pcomplete/sudo ()
      (let ((prec (pcomplete-arg 'last -1)))
        (cond ((string= "sudo" prec)
               (while (pcomplete-here*
                       (funcall pcomplete-command-completion-function)
                       (pcomplete-arg 'last) t))))))

    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-mode-map
                  [remap eshell-pcomplete]
                  'helm-esh-pcomplete)
                (define-key eshell-mode-map
                  (kbd "M-p")
                  'helm-eshell-history)
                (eshell/export "NODE_NO_READLINE=1"))))
  #+end_src

* Expand region

#+begin_src emacs-lisp
  (use-package expand-region :bind
    ("C-=" . er/expand-region))
#+end_src

* Fill column indicator

#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :init
    (turn-on-fci-mode)

    (defun jcf-fci-enabled-p ()
      (and (boundp 'fci-mode) fci-mode))

    (defvar jcf-fci-mode-suppressed nil)

    (defadvice popup-create (before suppress-fci-mode activate)
      "Suspend fci-mode while popups are visible"
      (let ((fci-enabled (jcf-fci-enabled-p)))
        (when fci-enabled
          (set (make-local-variable 'jcf-fci-mode-suppressed) fci-enabled)
          (turn-off-fci-mode))))

    (defadvice popup-delete (after restore-fci-mode activate)
      "Restore fci-mode when all popups have closed"
      (when (and jcf-fci-mode-suppressed
                 (null popup-instances))
        (setq jcf-fci-mode-suppressed nil)
        (turn-on-fci-mode))

      (defadvice enable-theme (after recompute-fci-face activate)
        "Regenerate fci-mode line images after switching themes"
        (dolist (buffer (buffer-list))
          (with-current-buffer buffer
            (turn-on-fci-mode))))))
#+end_src

* Global Tags

Powered by [[http://www.gnu.org/software/global/][GNU Global]].

#+begin_src emacs-lisp
  (use-package ggtags)
#+end_src

* gnuplot

#+begin_src emacs-lisp
  (use-package gnuplot
    :commands gnuplot-mode
    :mode "\\.gp$")
#+end_src

* google-this

#+begin_src emacs-lisp
  (use-package google-this)
#+end_src

* Highlight escape sequences

#+begin_src emacs-lisp
  (use-package highlight-escape-sequences :init
    (hes-mode))
#+end_src

* Highlight symbols

#+begin_src emacs-lisp
  (use-package highlight-symbol
    :diminish highlight-symbol-mode
    :config
    (dolist (hook '(prog-mode-hook html-mode-hook))
      (add-hook hook 'highlight-symbol-mode)
      (add-hook hook 'highlight-symbol-nav-mode)))
#+end_src

* Hippie

#+begin_src emacs-lisp
  (use-package hippie-expand
    :init
    (setq hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill))
    :bind
    ("M-/" . hippie-expand))
#+end_src

* htmlize

#+begin_src emacs-lisp
  (use-package htmlize
    :commands (htmlize-buffer
               htmlize-file
               htmlize-many-files
               htmlize-many-files-dired
               htmlize-region))
#+end_src

* ibuffer

- Version-control support
- Setup filters
- Use human readable file sizes
- Customise formats (toggle with ~`~)
- Bind to "C-x C-b"

#+begin_src emacs-lisp
  (use-package ibuffer
    :commands ibuffer
    :config
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    (use-package ibuffer-vc
      :commands ibuffer
      :init
      (setq
       ibuffer-filter-group-name-face 'font-lock-doc-face
       ibuffer-formats
       '((mark modified read-only vc-status-mini " "
               (name 18 18 :left :elide)
               " "
               (size-h 9 -1 :right)
               " "
               (mode 16 16 :left :elide)
               " "
               filename-and-process)
         (mark modified read-only vc-status-mini " "
               (name 18 18 :left :elide)
               " "
               (size-h 9 -1 :right)
               " "
               (mode 16 16 :left :elide)
               " "
               (vc-status 16 16 :left)
               " "
               filename-and-process)))

      (defun ibuffer-set-up-preferred-filters ()
        (ibuffer-vc-set-filter-groups-by-vc-root)
        (unless (eq ibuffer-sorting-mode 'filename/process)
          (ibuffer-do-sort-by-filename/process)))

      (add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters))

    :bind
    ("C-x C-b" . ibuffer))
#+end_src

* ido

#+begin_src emacs-lisp
  (use-package ido
    :disabled t
    :init
    (setq
     ido-auto-merge-work-directories-length 0
     ido-default-buffer-method 'selected-window
     ido-enable-flex-matching t
     ido-use-filename-at-point nil
     ido-use-virtual-buffers t)

    (ido-mode t)
    (ido-everywhere t)
    (use-package ido-vertical-mode :init (ido-vertical-mode 1))
    (use-package ido-ubiquitous :init (ido-ubiquitous-mode t))
    (use-package idomenu)

    :config
    ;; Allow the same buffer to be open in different frames.
    ;;
    ;; http://www.reddit.com/r/emacs/comments/21a4p9/use_recentf_and_ido_together/cgbprem
    (add-hook
     'ido-setup-hook
     (lambda ()
       (define-key ido-completion-map [up] 'previous-history-element))))
#+end_src

* ielm

#+begin_src emacs-lisp
  (use-package ielm
    :commands ielm
    :init
    (defun jcf-start-process (&rest args)
      "Start a process in a new buffer"
      (let ((progname (car args)))
        (apply 'start-process progname (concat "*" progname "*") args))))
#+end_src

* Key Chord

#+BEGIN_QUOTE
Key-chord lets you bind commands to combination of key-strokes. Here a "key
chord" means two keys pressed simultaneously, or a single key quickly pressed
twice.
#+END_QUOTE

http://www.emacswiki.org/emacs/KeyChord

#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (setq key-chord-two-keys-delay 0.05)
    (key-chord-mode 1)

    :config
    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state))
#+end_src

* Multi Term

#+begin_src emacs-lisp
  (use-package multi-term
    :commands multi-term
    :init
    (add-hook 'term-mode-hook
              (lambda () (yas-minor-mode -1))))
#+end_src

* Multiple major modes

#+begin_src emacs-lisp
  (use-package mmm-mode
    :commands mmm-mode
    :config
    (setq
     mmm-global-mode 'buffers-with-submode-classes
     mmm-submode-decoration-level 0)

    (use-package mmm-auto))
#+end_src

* mwe-log-commands

[[http://www.foldr.org/~michaelw/emacs/mwe-log-commands.el][~mwe-log-commands~]] is logs is designed for use during demos, logging keystrokes
into a designated buffer, along with the command bound to them.

#+begin_src emacs-lisp
  (use-package mwe-log-commands)
#+end_src

* Page break lines

#+begin_src emacs-lisp
  (use-package page-break-lines
    :diminish page-break-lines-mode
    :init
    (global-page-break-lines-mode))
#+end_src

* project-local-variables

The [[http://www.emacswiki.org/emacs/ProjectLocalVariables][~project-local-variables~]] package looks for a ~.emacs-project~ file in your
current directory, and evaluates its contents.

This poses an obvious security risk as any arbitrary Lisp code will be evaluated
when found.

Consider replacing with the built-in [[http://www.emacswiki.org/emacs/DirectoryVariables][~directory-variables~]].

#+begin_src emacs-lisp
  (use-package project-local-variables)
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :commands (projectile-global-mode
               projectile-mode)
    :init
    (projectile-global-mode))
#+end_src

* recentf

#+begin_src emacs-lisp
  (use-package recentf
    :init
    (recentf-mode 1)

    :config
    (setq
     recentf-max-saved-items 1000
     recentf-exclude '("/tmp/" "/ssh:")))
#+end_src

* regex-tool

#+begin_src emacs-lisp
  (use-package regex-tool)
#+end_src

* Scratch

When Emacs starts up, it contains a buffer named *scratch*, which is provided
for evaluating Emacs Lisp expressions interactively. Its major mode is Lisp
Interaction mode. You can also enable Lisp Interaction mode by typing ~M-x
lisp-interaction-mode~.

#+begin_src emacs-lisp
  (use-package scratch)
#+end_src

* Shackle

#+begin_quote
~shackle~ gives you the means to put an end to popped up buffers not behaving
they way you'd like them to. By setting up simple rules you can for instance
make Emacs always select help buffers for you or make everything reuse your
currently selected window.
#+end_quote

https://github.com/wasamasa/shackle

#+begin_src emacs-lisp
  (use-package shackle
    :init
    (setq
     shackle-rules
     '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.4)
       (compilation-mode :noselect t)
       (t :select t))))
#+end_src

* Smart mode line

Diminish isn't supported, so we have to use the slightly less powerful
[[https://github.com/Bruce-Connor/rich-minority][rich-minority]] library by the author of smart mode line.

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :disabled t
    :init
    (setq
     sml/no-confirm-load-theme t
     sml/theme 'respectful
     sml/shorten-modes t
     sml/hidden-modes '(" EvilOrg"
                        " Fill"
                        " Ind"
                        " Projectile"
                        " SP"
                        " Undo-Tree"
                        " yas"
                        " WSC"))
    (sml/setup)
    :config
    (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox" ":Box:") t)
    (add-to-list 'sml/replacer-regexp-list '("^~/Code" ":C:") t))
#+end_src

* SmartParens

#+begin_src emacs-lisp
  (use-package smartparens
    :init
    (smartparens-global-mode 1)
    (show-smartparens-global-mode +1)

    :bind (("M-n" . sp-next-sexp)
           ("M-p" . sp-previous-sexp)
           ("M-f" . sp-forward-sexp)
           ("M-b" . sp-backward-sexp))

    :config
    ;; Enable smartparens everywhere
    (use-package smartparens-config)

    ;; Require and disable paredit because some packages rely on it.
    (use-package paredit)
    (disable-paredit-mode)

    (setq
     smartparens-strict-mode t
     sp-autoinsert-if-followed-by-word t
     sp-autoskip-closing-pair 'always
     sp-base-key-bindings 'paredit
     sp-hybrid-kill-entire-symbol nil)

    (sp-use-paredit-bindings)

    (sp-with-modes '(markdown-mode gfm-mode rst-mode)
      (sp-local-pair "*" "*" :bind "C-*")
      (sp-local-tag "2" "**" "**")
      (sp-local-tag "s" "```scheme" "```")
      (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

    ;; Close a backtick with another backtick in clojure-mode
    (sp-local-pair 'clojure-mode "`" "`" :when '(sp-in-string-p))

    (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p)))
#+end_src

* smex

#+begin_src emacs-lisp
  (use-package smex :init
    (setq smex-save-file
          (expand-file-name ".smex-items" user-emacs-directory)))
#+end_src

* The Silver Surfer (~ag~)

A [[https://github.com/ggreer/the_silver_searcher][code searching tool]] similar to ack, with a focus on speed.

Can be [[https://github.com/ggreer/the_silver_searcher#installation][installed]] via Homebrew on OS X.

#+begin_src emacs-lisp
  (defvar executable-ag-available?
    (executable-find "ag"))

  (use-package ag
    :if executable-ag-available?
    :init
    (use-package wgrep-ag)
    (setq-default ag-highlight-search t)
    :bind
    ("M-?" . ag-project))
#+end_src

* Undo tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+end_src

* Unfill

#+begin_src emacs-lisp
  (use-package unfill)
#+end_src

* Vagrant

vagrant.el allows us to more easily manage Vagrant boxes.

#+begin_src emacs-lisp
  (use-package vagrant
    :commands (vagrant-destroy
               vagrant-edit
               vagrant-halt
               vagrant-provision
               vagrant-reload
               vagrant-resume
               vagrant-ssh
               vagrant-status
               vagrant-suspend
               vagrant-up))
#+end_src

* wgrep

[[https://github.com/mhayashi1120/Emacs-wgrep][~wgrep~]] makes the ~grep~, and ~ag~ buffers writable so you can make changes to
your search results.

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

* Whitespace cleanup

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode :init
    (global-whitespace-cleanup-mode t))
#+end_src

* Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)

    :config
    (use-package string-utils)

    (let ((snippets-dir (expand-file-name "snippets" user-emacs-directory)))
      (if (f-directory? snippets-dir)
          (setq yas-snippet-dirs snippets-dir))))
#+end_src
