#+TITLE: emacs.d - Packages
#+AUTHOR: James Conroy-Finn
#+EMAIL: james@logi.cl
#+STARTUP: content
#+OPTIONS: toc:2 num:nil ^:nil

* Packages

  The many packages we use are required and configured below.

** Ace Jump

   #+begin_src emacs-lisp
     (use-package ace-jump-mode :bind
       (("C-;" . ace-jump-mode)
        ("C-:" . ace-jump-word-mode)))
   #+end_src

** Company

   #+begin_src emacs-lisp
     (use-package company
       :diminish company-mode
       :init
       (global-company-mode 1)

       :config
       (progn
         (dolist ((package '(company-ghc
                             company-go
                             company-inf-ruby
                             company-tern)))
           (use-package package :init
             (add-to-list 'company-backends package)))

         ;; Use Helm to complete suggestions
         (define-key company-mode-map (kbd "C-:") 'helm-company)
         (define-key company-active-map (kbd "C-:") 'helm-company)))
   #+end_src

** Dired

   #+begin_src emacs-lisp
     (use-package dired
       :init
       (setq dired-recursive-deletes 'top)

       :config
       (progn
         (define-key dired-mode-map [mouse-2] 'dired-find-file)
         (guide-key/add-local-guide-key-sequence "%")

         (use-package dired+
           :init
           (setq diredp-hide-details-initially-flag nil)
           :config
           (global-dired-hide-details-mode -1))))

   #+end_src

** dsvn

   #+begin_src emacs-lisp
     (use-package dsvn)
   #+end_src

** erc

   #+begin_src emacs-lisp
     (use-package erc
       :init
       (setq
        erc-hide-list '("JOIN" "PART" "QUIT")
        erc-insert-timestamp-function 'erc-insert-timestamp-left
        erc-timestamp-format "[%H:%M] "
        erc-timestamp-only-if-changed-flag nil
        erc-truncate-mode t)
       :config
       (add-hook
        'window-configuration-change-hook
        (lambda () (setq erc-fill-column (- (window-width) 2)))))
    #+end_src

** eshell

   Eshell provides an Emacs Lisp enabled shell.

   - Always insert text at the prompt.
   - Allow symbol names to be used for redirection targets.
   - This makes it possible to redirect output like so:
   - Ignore case when completing filenames.
   - Error when a glob matches nothing. This mirrors the default
     behaviour of zsh.
   - Make globs case-insensitive.

   ~NODE_NO_READLINE=1~ tells Node.js, and hence ~npm~ to avoid use of
   escape codes because they don't print well.

   #+begin_src emacs-lisp
     (use-package eshell
       :init
       (setq
        eshell-buffer-shorthand t
        eshell-cmpl-ignore-case t
        eshell-error-if-no-glob t
        eshell-glob-case-insensitive t
        eshell-scroll-to-bottom-on-input 'all)
       :config
       (eshell/export "NODE_NO_READLINE=1"))
   #+end_src

** Expand region

   #+begin_src emacs-lisp
     (use-package expand-region :bind
       ("C-=" . er/expand-region))
   #+end_src

** Fill column indicator

   #+begin_src emacs-lisp
     (use-package fill-column-indicator
       :init
       (fci-mode 1)

       :config
       (progn
         (defadvice popup-create (before suppress-fci-mode activate)
           "Suspend fci-mode while popups are visible"
           (let ((fci-enabled (jcf/fci-enabled-p)))
             (when fci-enabled
               (set (make-local-variable 'jcf/fci-mode-suppressed) fci-enabled)
               (turn-off-fci-mode))))

         (defadvice popup-delete (after restore-fci-mode activate)
           "Restore fci-mode when all popups have closed"
           (when (and jcf/fci-mode-suppressed
                      (null popup-instances))
             (setq jcf/fci-mode-suppressed nil)
             (turn-on-fci-mode))

           (defadvice enable-theme (after recompute-fci-face activate)
             "Regenerate fci-mode line images after switching themes"
             (dolist (buffer (buffer-list))
               (with-current-buffer buffer
                 (turn-on-fci-mode)))))))
   #+end_src

** Global Tags

   Powered by [[http://www.gnu.org/software/global/][GNU Global]].

   #+begin_src emacs-lisp
     (use-package ggtags :init
       (ggtags-mode 1))
   #+end_src

** gnuplot

   #+begin_src emacs-lisp
     (use-package gnuplot)
   #+end_src

** google-this

   #+begin_src emacs-lisp
     (use-package google-this)
   #+end_src

** Highlight symbols

   #+begin_src emacs-lisp
     (use-package highlight-symbol
       :diminish highlight-symbol-mode
       :config
       (dolist (hook '(prog-mode-hook html-mode-hook))
         (add-hook hook 'highlight-symbol-mode)
         (add-hook hook 'highlight-symbol-nav-mode)))
   #+end_src

** Hippie

   #+begin_src emacs-lisp
     (use-package hippie-expand
       :init
       (setq hippie-expand-try-functions-list
             '(try-complete-file-name-partially
               try-complete-file-name
               try-expand-dabbrev
               try-expand-dabbrev-all-buffers
               try-expand-dabbrev-from-kill))
       :bind
       ("M-/" . hippie-expand))
   #+end_src

** htmlize

   #+begin_src emacs-lisp
     (use-package htmlize)
   #+end_src

** ibuffer

    - Version-control support
    - Setup filters
    - Use human readable file sizes
    - Customise formats (toggle with ~`~)
    - Bind to "C-x C-b"

    #+begin_src emacs-lisp
      (use-package ibuffer
        :init
        (use-package ibuffer-vc
          :init
          (progn
            (setq
             ibuffer-filter-group-name-face 'font-lock-doc-face
             ibuffer-formats
             '((mark modified read-only vc-status-mini " "
                     (name 18 18 :left :elide)
                     " "
                     (size-h 9 -1 :right)
                     " "
                     (mode 16 16 :left :elide)
                     " "
                     filename-and-process)
               (mark modified read-only vc-status-mini " "
                     (name 18 18 :left :elide)
                     " "
                     (size-h 9 -1 :right)
                     " "
                     (mode 16 16 :left :elide)
                     " "
                     (vc-status 16 16 :left)
                     " "
                     filename-and-process)))

            (after-load 'ibuffer
              (define-ibuffer-column size-h
                (:name "Size" :inline t)
                (cond
                 ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
                 ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
                 (t (format "%8d" (buffer-size))))))

            (defun ibuffer-set-up-preferred-filters ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'filename/process)
                (ibuffer-do-sort-by-filename/process)))

            (add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters)))

        :bind
        ("C-x C-b" . ibuffer))
    #+end_src

** ido

   #+begin_src emacs-lisp
     (use-package ido-vertical-mode)

     (use-package ido
       :init
       (progn
         (ido-mode t)
         (ido-everywhere t)
         (ido-vertical-mode 1)

         (setq
          ido-auto-merge-work-directories-length 0
          ido-default-buffer-method 'selected-window
          ido-enable-flex-matching t
          ido-use-filename-at-point nil
          ido-use-virtual-buffers t)

         ;; Allow the same buffer to be open in different frames.
         ;;
         ;; http://www.reddit.com/r/emacs/comments/21a4p9/use_recentf_and_ido_together/cgbprem
         (add-hook
          'ido-setup-hook
          (lambda ()
            (define-key ido-completion-map [up] 'previous-history-element)))

         (use-package ido-ubiquitous :init
           (ido-ubiquitous-mode t))

         (use-package idomenu)))

     (use-package smex :init
       (setq smex-save-file
             (expand-file-name ".smex-items" user-emacs-directory)))
   #+end_src

** Key Chord

   #+BEGIN_QUOTE
   Key-chord lets you bind commands to combination of key-strokes. Here
   a "key chord" means two keys pressed simultaneously, or a single key
   quickly pressed twice.
   #+END_QUOTE

   http://www.emacswiki.org/emacs/KeyChord

   #+begin_src emacs-lisp
     (use-package key-chord
       :init
       (progn
         (setq key-chord-two-keys-delay 0.05)
         (key-chord-mode 1))

       :config
       (key-chord-define evil-insert-state-map "jj" 'evil-normal-state))
   #+end_src

** Multiple major modes

   #+begin_src emacs-lisp
     (require 'mmm-mode)
     (require 'mmm-auto)
     (setq mmm-global-mode 'buffers-with-submode-classes)
     (setq mmm-submode-decoration-level 0)
   #+end_src

** mwe-log-commands

   [[http://www.foldr.org/~michaelw/emacs/mwe-log-commands.el][~mwe-log-commands~]] is logs is designed for use during demos, logging
   keystrokes into a designated buffer, along with the command bound to
   them.

   #+begin_src emacs-lisp
     (require 'mwe-log-commands)
   #+end_src

** Page break lines

   #+begin_src emacs-lisp
     (require 'page-break-lines)
     (global-page-break-lines-mode)
     (diminish 'page-break-lines-mode)
   #+end_src

** project-local-variables

    The [[http://www.emacswiki.org/emacs/ProjectLocalVariables][~project-local-variables~]] package looks for a ~.emacs-project~
    file in your current directory, and evaluates its contents.

    This poses an obvious security risk as any arbitrary Lisp code will
    be evaluated when found.

    Consider replacing with the built-in [[http://www.emacswiki.org/emacs/DirectoryVariables][~directory-variables~]].

    #+begin_src emacs-lisp
      (require 'project-local-variables)
    #+end_src

** Projectile

    #+begin_src emacs-lisp
      (require 'projectile)
      (projectile-global-mode)
    #+end_src

** regex-tool

   #+begin_src emacs-lisp
     (require 'regex-tool)
   #+end_src
** Scratch

   When Emacs starts up, it contains a buffer named *scratch*, which
   is provided for evaluating Emacs Lisp expressions
   interactively. Its major mode is Lisp Interaction mode. You can
   also enable Lisp Interaction mode by typing ~M-x
   lisp-interaction-mode~.

   #+begin_src emacs-lisp
     (require 'scratch)
   #+end_src

** Smart mode line

   Disabled for now.

   #+begin_src emacs-lisp
     ;; (require 'smart-mode-line)

     ;; (setq sml/theme nil)
     ;; (sml/setup)
   #+end_src

** SmartParens

   #+begin_src emacs-lisp
     (require 'smartparens)

     ;; I don't need paredit, but some package developers do!
     (require 'paredit)

     (after-load 'smartparens
       (require 'paredit)
       (disable-paredit-mode))

     ;; Enable smartparens everywhere
     (require 'smartparens-config)

     (setq smartparens-strict-mode t)
     (setq sp-autoinsert-if-followed-by-word t)
     (setq sp-autoskip-closing-pair 'always)
     (setq sp-base-key-bindings 'paredit)
     (setq sp-hybrid-kill-entire-symbol nil)

     (smartparens-global-mode 1)
     (show-smartparens-global-mode +1)

     (sp-use-paredit-bindings)

     (sp-with-modes '(markdown-mode gfm-mode rst-mode)
       (sp-local-pair "*" "*" :bind "C-*")
       (sp-local-tag "2" "**" "**")
       (sp-local-tag "s" "```scheme" "```")
       (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

     (sp-with-modes '(html-mode sgml-mode)
       (sp-local-pair "<" ">"))

     ;; Close a backtick with another backtick in clojure-mode
     (sp-local-pair 'clojure-mode "`" "`" :when '(sp-in-string-p))

     (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))
   #+end_src

** The Silver Surfer (~ag~)

   A [[https://github.com/ggreer/the_silver_searcher][code searching tool]] similar to ack, with a focus on speed.

   Can be [[https://github.com/ggreer/the_silver_searcher#installation][installed]] via Homebrew on OS X.

   #+begin_src emacs-lisp
     (when (executable-find "ag")
       (require 'ag)
       (require 'wgrep-ag)
       (setq-default ag-highlight-search t)
       (global-set-key (kbd "M-?") 'ag-project))
   #+end_src

** Highlight escape sequences

   #+begin_src emacs-lisp
     (require 'highlight-escape-sequences)
     (hes-mode)
   #+end_src

** Editorconfig

   #+begin_src emacs-lisp
     (require 'editorconfig)
     (add-to-list 'auto-mode-alist '("\\.editorconfig\\'" . conf-unix-mode))
   #+end_src

** recentf

   #+begin_src emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-saved-items 1000
           recentf-exclude '("/tmp/" "/ssh:"))
    #+end_src

** Undo tree

   #+begin_src emacs-lisp
    (require 'undo-tree)
    (global-undo-tree-mode)
    (diminish 'undo-tree-mode)
   #+end_src

** Unfill

  #+begin_src emacs-lisp
    (require 'unfill)
   #+end_src

** wgrep

    [[https://github.com/mhayashi1120/Emacs-wgrep][~wgrep~]] makes the ~grep~, and ~ag~ buffers writable so you can make
    changes to your search results.

    #+begin_src emacs-lisp
      (require 'wgrep)
    #+end_src

** Whitespace cleanup

   #+begin_src emacs-lisp
    (require 'whitespace-cleanup-mode)
    (global-whitespace-cleanup-mode t)
   #+end_src

** Yasnippet

   #+begin_src emacs-lisp
     (require 'yasnippet)
     (require 'string-utils)

     (let ((snippets-dir (expand-file-name "snippets" user-emacs-directory)))
       (if (f-directory? snippets-dir)
           (setq yas-snippet-dirs snippets-dir)))

     (yas-global-mode 1)
   #+end_src
